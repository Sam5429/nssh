/// multiplication by y in the Rinjndael field
fn xtime(y: u8) -> u8 {
    if y & 0x80 == 0 {
        y << 1
    } else {
        (y << 1) ^ 0x1b
    }
}

/// product of two numbers in the Rinjndael field
fn prod(mut x: u8, y: u8) -> u8 {
    let mut result = 0;

    for i in 0..8 {
        if y & (1 << i) != 0 {
            result ^= x;
        }
        x = xtime(x);
    }

    result
}

// ==================
// Confusion / Diffusion
// ==================

const S: [u8; 256] = [
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16,
];

const INV_S: [u8; 256] = [
    0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
    0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
    0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
    0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
    0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
    0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
    0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
    0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
    0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
    0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
    0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
    0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
    0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
    0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
    0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D,
];

/// Substitute bytes in the state using the S-box
fn sub_bytes(state: &mut [[u8; 4]; 4]) {
    for i in 0..4 {
        for j in 0..4 {
            state[i][j] = S[state[i][j] as usize];
        }
    }
}

/// Inverse substitute bytes in the state using the inverse S-box
fn inv_sub_bytes(state: &mut [[u8; 4]; 4]) {
    for i in 0..4 {
        for j in 0..4 {
            state[i][j] = INV_S[state[i][j] as usize];
        }
    }
}

/// Shift left a row by one position
fn shift_left(row: &mut [u8; 4]) {
    let tmp = row[0];
    for i in 1..4 {
        row[i - 1] = row[i];
    }
    row[3] = tmp;
}

/// Shift right a row by one position
fn shift_right(row: &mut [u8; 4]) {
    let tmp = row[3];
    for i in (1..4).rev() {
        row[i] = row[i - 1];
    }
    row[0] = tmp;
}

/// Shift rows in the state
fn shift_rows(state: &mut [[u8; 4]; 4]) {
    for i in 1..4 {
        for _ in 0..i {
            shift_left(&mut state[i]);
        }
    }
}

/// Inverse shift rows in the state
fn inv_shift_rows(state: &mut [[u8; 4]; 4]) {
    for i in 1..4 {
        for _ in 0..i {
            shift_right(&mut state[i]);
        }
    }
}

/// Mix columns in the state
fn mix_columns(state: &mut [[u8; 4]; 4]) {
    for i in 0..4 {
        let mut row_tmp = [0u8; 4];
        row_tmp[0] = prod(2, state[0][i]) ^ prod(3, state[1][i]) ^ state[2][i] ^ state[3][i];
        row_tmp[1] = state[0][i] ^ prod(2, state[1][i]) ^ prod(3, state[2][i]) ^ state[3][i];
        row_tmp[2] = state[0][i] ^ state[1][i] ^ prod(2, state[2][i]) ^ prod(3, state[3][i]);
        row_tmp[3] = prod(3, state[0][i]) ^ state[1][i] ^ state[2][i] ^ prod(2, state[3][i]);
        for j in 0..4 {
            state[j][i] = row_tmp[j];
        }
    }
}

/// Inverse mix columns in the state
fn inv_mix_columns(state: &mut [[u8; 4]; 4]) {
    for i in 0..4 {
        let mut row_tmp = [0u8; 4];
        row_tmp[0] = prod(0x0e, state[0][i])
            ^ prod(0x0b, state[1][i])
            ^ prod(0x0d, state[2][i])
            ^ prod(0x09, state[3][i]);
        row_tmp[1] = prod(0x09, state[0][i])
            ^ prod(0x0e, state[1][i])
            ^ prod(0x0b, state[2][i])
            ^ prod(0x0d, state[3][i]);
        row_tmp[2] = prod(0x0d, state[0][i])
            ^ prod(0x09, state[1][i])
            ^ prod(0x0e, state[2][i])
            ^ prod(0x0b, state[3][i]);
        row_tmp[3] = prod(0x0b, state[0][i])
            ^ prod(0x0d, state[1][i])
            ^ prod(0x09, state[2][i])
            ^ prod(0x0e, state[3][i]);
        for j in 0..4 {
            state[j][i] = row_tmp[j];
        }
    }
}

/// Add round key to the state
fn add_round_key(state: &mut [[u8; 4]; 4], round_key: &[[u8; 4]; 4]) {
    for i in 0..4 {
        for j in 0..4 {
            state[i][j] ^= round_key[i][j];
        }
    }
}

// =====================
// Key Management
// =====================

/// Extract a round key from the expanded key
fn extract_round_key(k: i32, expended_key: &[u32]) -> [[u8; 4]; 4] {
    let mut round_key: [[u8; 4]; 4] = [[0u8; 4]; 4];

    for j in 0..4 {
        round_key[0][j] = (expended_key[(4 * k + j as i32) as usize] >> 24) as u8;
        round_key[1][j] = (expended_key[(4 * k + j as i32) as usize] >> 16) as u8;
        round_key[2][j] = (expended_key[(4 * k + j as i32) as usize] >> 8) as u8;
        round_key[3][j] = expended_key[(4 * k + j as i32) as usize] as u8;
    }

    round_key
}

/// Expand the key to generate the round keys
pub fn key_expansion(key: [u8; 16]) -> [u32; 44] {
    let mut expanded_key: [u32; 44] = [0; 44];
    let mut temp: u32;

    // First 4 words are obtained by concatenating bytes from the key
    for i in 0..4 {
        expanded_key[i] = (key[4 * i] as u32) << 24
            | (key[4 * i + 1] as u32) << 16
            | (key[4 * i + 2] as u32) << 8
            | key[4 * i + 3] as u32;
    }

    for i in 4..44 {
        temp = expanded_key[i - 1];
        // Create the first word of the new key
        if i % 4 == 0 {
            let mut power = 1;
            // Know that it's the nth key
            for _ in 1..i / 4 {
                power = prod(2, power);
            }
            let x_3 = (temp) as u8;
            let x_2 = (temp >> 8) as u8;
            let mut x_1 = (temp >> 16) as u8;
            x_1 = (power ^ S[x_1 as usize]) as u8;
            let x_0 = (temp >> 24) as u8;
            temp = x_1 as u32;
            temp = temp << 8 | S[x_2 as usize] as u32;
            temp = temp << 8 | S[x_3 as usize] as u32;
            temp = temp << 8 | S[x_0 as usize] as u32;
        }
        expanded_key[i] = expanded_key[i - 4] ^ temp;
    }

    expanded_key
}

// ====================
// Block Management
// ====================

/// Convert input block to state matrix
fn make_state(input: [u8; 16]) -> [[u8; 4]; 4] {
    let mut state = [[0u8; 4]; 4];

    for j in 0..4 {
        for i in 0..4 {
            state[i][j] = input[4 * j + i];
        }
    }

    state
}

/// Convert state matrix to output block
fn make_block(state: [[u8; 4]; 4]) -> [u8; 16] {
    let mut output: [u8; 16] = [0; 16];

    for j in 0..4 {
        for i in 0..4 {
            output[4 * j + i] = state[i][j];
        }
    }

    output
}

// ====================
// Encryption / Decryption
// ====================

/// Encrypt a block of data
pub fn cypher(input: [u8; 16], expended_key: &[u32]) -> [u8; 16] {
    let mut round_key = extract_round_key(0, expended_key);
    let mut state = make_state(input);

    add_round_key(&mut state, &round_key);

    for i in 1..10 {
        sub_bytes(&mut state);
        shift_rows(&mut state);
        mix_columns(&mut state);
        round_key = extract_round_key(i, expended_key);
        add_round_key(&mut state, &round_key);
    }

    sub_bytes(&mut state);
    shift_rows(&mut state);
    round_key = extract_round_key(10, expended_key);
    add_round_key(&mut state, &round_key);

    make_block(state)
}

/// Decrypt a block of data
pub fn decypher(input: [u8; 16], expended_key: &[u32]) -> [u8; 16] {
    let mut round_key = extract_round_key(10, expended_key);
    let mut state = make_state(input);

    add_round_key(&mut state, &round_key);

    for i in (1..10).rev() {
        inv_shift_rows(&mut state);
        inv_sub_bytes(&mut state);
        round_key = extract_round_key(i, expended_key);
        add_round_key(&mut state, &round_key);
        inv_mix_columns(&mut state);
    }

    inv_shift_rows(&mut state);
    inv_sub_bytes(&mut state);
    round_key = extract_round_key(0, expended_key);
    add_round_key(&mut state, &round_key);

    make_block(state)
}
